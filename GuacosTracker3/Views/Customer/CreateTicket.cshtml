@model CreateTicketViewModel
@using GuacosTracker3.SharedData

<div class="row my-3">
    <div class="col">
        <div class="form-group text-danger">(*) Required</div>
        <form asp-action="CreateTicket">
            <div asp-validation-summary="All" class="text-danger"></div>

            <input type="hidden" asp-for="CustomerID" value="@Model.CustomerID"/>
            <input type="hidden" asp-for="CustomerFName" value="@Model.CustomerFName" />
            <input type="hidden" asp-for="CustomerLName" value="@Model.CustomerLName" />
            <input type="hidden" asp-for="Ticket.CustomerID" value="@Model.CustomerID" />

            <div class="form-group">
                <label asp-for="Ticket.Title" class="control-label"></label> <span class="text-danger">*</span>
                <span asp-validation-for="Ticket.Title" class="text-danger"></span>
                <input asp-for="Ticket.Title" class="form-control" />
                <span><span id="title-characters" class="text-danger">0</span>/100</span>
            </div>
            <div class="form-group">
                <label asp-for="Ticket.CurrentStatus" class="control-label"></label> <span class="text-danger">*</span>
                <span asp-validation-for="Ticket.CurrentStatus" class="text-danger"></span>
                <select asp-for="Ticket.CurrentStatus" class="form-control" asp-items="ProgressList.GetStatusListOpen()">
                </select> @*for drop down for status*@
            </div>
            <div class="form-group">
                @*Will be pulled automatically*@
                <input type="hidden" asp-for="Ticket.EmployeeID" class="form-control" value="@User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value" />
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label> <span class="text-danger">*</span>
                <span asp-validation-for="Description" class="text-danger"></span>
                <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                <span><span id="textarea-characters" class="text-danger">0</span>/4000</span>
            </div>
           
            <div class="form-group form-check">
                <label class="control-label mt-2">
                    <input class="form-check-input" asp-for="Ticket.Priority" /> @Html.DisplayNameFor(model => model.Ticket.Priority)
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary mt-2" />
            </div>
        </form>
    </div>
</div>

<div class="row my-3">
    <div class="col">
        <a asp-controller="Customer" asp-action="Index">Back to List</a>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    const descriptionTextArea = document.getElementById('Description');
    const descriptionCharacters = document.getElementById('textarea-characters');

    const titleInput = document.getElementById('Ticket_Title');
    const titleCharacters = document.getElementById('title-characters');

    checkLength(descriptionCharacters, descriptionTextArea.value.length);
    checkLength(titleCharacters, titleInput.value.length);

    descriptionTextArea.addEventListener('keyup', function(){
        const characters = descriptionTextArea.value.length;

        checkLength(descriptionCharacters, characters, 10, 4000);
    });

    titleInput.addEventListener('keyup', function(){
        const characters = titleInput.value.length;

        checkLength(titleCharacters, characters);
    });

    function checkLength(elem, valueLength, minLength = 5, maxLength = 100) {
        if (valueLength < minLength || valueLength >= maxLength) {
            elem.classList.add('text-danger');
        } else {
            elem.classList.remove('text-danger')
        }
        elem.innerText = valueLength;
    }
</script>